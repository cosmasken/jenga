{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_chamaCoreAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_chamaGamificationAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_p2pTransferAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidModule",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ModuleNotSet",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "action",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "points",
						"type": "uint256"
					}
				],
				"name": "CrossModuleInteraction",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "moduleName",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newAddress",
						"type": "address"
					}
				],
				"name": "ModuleUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_referrerHash",
						"type": "bytes32"
					}
				],
				"name": "acceptInvite",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "chamaCore",
				"outputs": [
					{
						"internalType": "contract ChamaCore",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "chamaGamification",
				"outputs": [
					{
						"internalType": "contract ChamaGamification",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_envelopeId",
						"type": "uint256"
					}
				],
				"name": "claimRedEnvelope",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_contributionAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_cycleDuration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxMembers",
						"type": "uint256"
					}
				],
				"name": "createChama",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_username",
						"type": "string"
					},
					{
						"internalType": "bytes32",
						"name": "_emailHash",
						"type": "bytes32"
					}
				],
				"name": "createProfile",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_envelopeId",
						"type": "uint256"
					}
				],
				"name": "expireRedEnvelope",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_username",
						"type": "string"
					},
					{
						"internalType": "bytes32",
						"name": "_emailHash",
						"type": "bytes32"
					}
				],
				"name": "generateInvite",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_chamaId",
						"type": "uint256"
					}
				],
				"name": "getChamaDetails",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "contributionAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "cycleDuration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxMembers",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentMembers",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "currentCycle",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalPool",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalCollateral",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getModuleAddresses",
				"outputs": [
					{
						"internalType": "address",
						"name": "chamaCoreAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "chamaGamificationAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "p2pTransferAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "getUserCompleteProfile",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "userAddress",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "username",
								"type": "string"
							},
							{
								"internalType": "bytes32",
								"name": "emailHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "createdAt",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct ChamaGamification.Profile",
						"name": "profile",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "score",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "points",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unlockedAt",
								"type": "uint256"
							}
						],
						"internalType": "struct ChamaGamification.Achievement[]",
						"name": "achievements",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256",
						"name": "p2pCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "redEnvelopeCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_chamaId",
						"type": "uint256"
					}
				],
				"name": "handleChamaCompletion",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_chamaId",
						"type": "uint256"
					}
				],
				"name": "joinChama",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "p2pTransfer",
				"outputs": [
					{
						"internalType": "contract P2PTransfer",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pauseAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_chamaId",
						"type": "uint256"
					}
				],
				"name": "processMissedContributions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					}
				],
				"name": "sendP2P",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_recipients",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_totalAmount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_isRandom",
						"type": "bool"
					},
					{
						"internalType": "string",
						"name": "_message",
						"type": "string"
					}
				],
				"name": "sendRedEnvelope",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_chamaId",
						"type": "uint256"
					}
				],
				"name": "stackBTC",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_chamaId",
						"type": "uint256"
					}
				],
				"name": "startChama",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpauseAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newChamaCore",
						"type": "address"
					}
				],
				"name": "updateChamaCore",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newChamaGamification",
						"type": "address"
					}
				],
				"name": "updateChamaGamification",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newP2PTransfer",
						"type": "address"
					}
				],
				"name": "updateP2PTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_username",
						"type": "string"
					}
				],
				"name": "updateProfile",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "Main contract that orchestrates all Jenga modules",
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				]
			},
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"acceptInvite(bytes32)": {
					"details": "Accept invitation"
				},
				"claimRedEnvelope(uint256)": {
					"details": "Claim red envelope"
				},
				"createChama(string,uint256,uint256,uint256)": {
					"details": "Create a new chama with gamification integration"
				},
				"createProfile(string,bytes32)": {
					"details": "Create user profile"
				},
				"expireRedEnvelope(uint256)": {
					"details": "Expire red envelope"
				},
				"generateInvite(string,bytes32)": {
					"details": "Generate invitation"
				},
				"getChamaDetails(uint256)": {
					"details": "Get chama details"
				},
				"getModuleAddresses()": {
					"details": "Get module addresses"
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getUserCompleteProfile(address)": {
					"details": "Get user's complete profile including all modules"
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"handleChamaCompletion(uint256)": {
					"details": "Emergency function to handle chama completion rewards"
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"joinChama(uint256)": {
					"details": "Join chama with gamification integration"
				},
				"pauseAll()": {
					"details": "Pause all modules"
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"processMissedContributions(uint256)": {
					"details": "Process missed contributions"
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"sendP2P(address)": {
					"details": "Send P2P transfer with gamification integration"
				},
				"sendRedEnvelope(address[],uint256,bool,string)": {
					"details": "Send red envelope with gamification integration"
				},
				"stackBTC(uint256)": {
					"details": "Make contribution with gamification tracking"
				},
				"startChama(uint256)": {
					"details": "Start chama"
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"unpauseAll()": {
					"details": "Unpause all modules"
				},
				"updateChamaCore(address)": {
					"details": "Update ChamaCore module"
				},
				"updateChamaGamification(address)": {
					"details": "Update ChamaGamification module"
				},
				"updateP2PTransfer(address)": {
					"details": "Update P2PTransfer module"
				},
				"updateProfile(string)": {
					"details": "Update user profile"
				}
			},
			"title": "JengaFactory",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "This contract provides a unified interface for all Jenga functionality",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"JengaFactory.sol": "JengaFactory"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af",
			"license": "MIT",
			"urls": [
				"bzz-raw://7bb7f346c12a14dc622bc105ce3c47202fbc89f4b153a28a63bb68193297330c",
				"dweb:/ipfs/QmagwF8P3bUBXwdo159ueEnY9dLSvEWwK24kk2op58egwG"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c",
			"license": "MIT",
			"urls": [
				"bzz-raw://b308f882e796f7b79c9502deacb0a62983035c6f6f4e962b319ba6a1f4a77d3d",
				"dweb:/ipfs/QmaWCW7ahEQqFjwhSUhV7Ae7WhfNvzSpE7DQ58hvEooqPL"
			]
		},
		"@openzeppelin/contracts/security/Pausable.sol": {
			"keccak256": "0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004",
				"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e",
			"license": "MIT",
			"urls": [
				"bzz-raw://81233d1f98060113d9922180bb0f14f8335856fe9f339134b09335e9f678c377",
				"dweb:/ipfs/QmWh6R35SarhAn4z2wH8SU456jJSYL2FgucfTFgbHJJN4E"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
				"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
			]
		},
		"ChamaCore.sol": {
			"keccak256": "0x9e56e1bf4fc3579068f01d602d72f9a3c7b7502c2bd3d27465d036e8a6fe70df",
			"license": "MIT",
			"urls": [
				"bzz-raw://dfc399bde9f79c0873ffec73dd923c7f3f8de3cba0cfd7d88e50ed616aeab4d4",
				"dweb:/ipfs/QmcqBbWVYgy47jmdL56BtiSu34sZpm2ETqEXnVogUPmdSS"
			]
		},
		"ChamaGamification.sol": {
			"keccak256": "0xe081388d9b9339f8208b545ff5ccf76209d92852739de37bc265d74036a118d5",
			"license": "MIT",
			"urls": [
				"bzz-raw://594f7f9bfa6b1bba083460d6967228ddddd9b61a33af089a89528b664c71ab62",
				"dweb:/ipfs/QmdtV3t2u8wbAaQBihVg7U3Nh9WbKd5tYXftyDn796hAkB"
			]
		},
		"JengaFactory.sol": {
			"keccak256": "0xde1b25de640ff4eb8d40112f78030146b4063a2896a3274f238c5aa4de46b724",
			"license": "MIT",
			"urls": [
				"bzz-raw://4efe10679ed90d09f239d2d3359ce9f7e81eeda3b7890555a0852a0e9b5561e8",
				"dweb:/ipfs/QmXTJc7cigxneEyD9aWMmtjPdRYXifNwan5hE9FTkz77pk"
			]
		},
		"P2PTransfer.sol": {
			"keccak256": "0x2788760aff59e79015bc299e8ecbc6362c8689d8f10157ced7d4536b9f988e1c",
			"license": "MIT",
			"urls": [
				"bzz-raw://7c9bfe7e0605c1cf53d847ff8d5c3b5df55c45a0495c4564ac28dba3bcb9173d",
				"dweb:/ipfs/Qmee7cYpbWKZ7mCaRr1jAiVEiBX72AxLqVF7gE2hdZTMFy"
			]
		}
	},
	"version": 1
}